{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "cf584f2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "682e2f61",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.rcParams.update({'font.size': 22})\n",
    "plt.rcParams[\"figure.figsize\"] = (15,10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "06a8d8b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def Distance(m):\n",
    "    return 10**((m+22+5)/5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "6d132602",
   "metadata": {},
   "outputs": [],
   "source": [
    "def kline(x):\n",
    "    return x-3933.7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "d3f3ed53",
   "metadata": {},
   "outputs": [],
   "source": [
    "def Hline(y):\n",
    "    return y-3968.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "d4adf010",
   "metadata": {},
   "outputs": [],
   "source": [
    "def vk(i):\n",
    "    return (3*10**(5))*i/3968.47"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "dcf57d2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def vh(h):\n",
    "    return (3*10**(5))*h/3968.47"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "22275e38",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "550.3000000000002\n",
      "196.30000000000018\n",
      "78.30000000000018\n",
      "511.3000000000002\n",
      "275.3000000000002\n"
     ]
    }
   ],
   "source": [
    "kwave= (4484,4130,4012,4445,4209)\n",
    "for g in kwave:\n",
    "    print(kline(g))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "41be8f64",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "198.5\n",
      "79.5\n",
      "515.5\n",
      "277.5\n"
     ]
    }
   ],
   "source": [
    "hwave=(4167,4048,4484,4246)\n",
    "for t in hwave:\n",
    "    print(Hline(t))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "632b0848",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "594292158.6155739\n",
      "210862814.99332887\n",
      "72443596.0074989\n",
      "564936974.8123034\n",
      "260615354.99988976\n"
     ]
    }
   ],
   "source": [
    "appmag=(16.87,14.62,12.3,16.76,15.08)\n",
    "listlist=[]\n",
    "for f in appmag:\n",
    "    print(Distance(f))\n",
    "    listlist.append(Distance(f))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "a20013f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "594.2921586155738\n",
      "210.86281499332887\n",
      "72.44359600749891\n",
      "564.9369748123034\n",
      "260.61535499988975\n"
     ]
    }
   ],
   "source": [
    "for i in listlist:\n",
    "    print(i/(1*10**(6)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "2ac329aa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "38971.94636723977\n",
      "12211.003232983998\n",
      "3290.6888548987395\n",
      "35343.34390835763\n",
      "18183.078113227515\n"
     ]
    }
   ],
   "source": [
    "Ak=(515.53,161.53,43.53,467.53,240.53)\n",
    "newnewnew=[]\n",
    "i=0\n",
    "for i in Ak:\n",
    "    print(vk(i))\n",
    "    newnewnew.append(vk(i))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "f0d33bf3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[38971.94636723977,\n",
       " 12211.003232983998,\n",
       " 3290.6888548987395,\n",
       " 35343.34390835763,\n",
       " 18183.078113227515]"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newnewnew"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "7e618ca3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0\n",
      "15008.050961705645\n",
      "7372.8666211411455\n",
      "38971.94636723977\n",
      "20980.12584194916\n"
     ]
    }
   ],
   "source": [
    "Ah=(0,198.53,97.53,515.53,277.53)\n",
    "newnew=[]\n",
    "for j in Ah:\n",
    "    print(vh(j))\n",
    "    newnew.append(vh(j))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "fa7a5906",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "190.10695250154583\n",
      "6.893963890635522\n"
     ]
    }
   ],
   "source": [
    "newnewnewnewnew=[]\n",
    "c=0\n",
    "sumsum=0\n",
    "while c <len(new):\n",
    "    (summ/5-new[c])**2\n",
    "    newnewnewnewnew.append((summ/5-new[c])**2)\n",
    "    c+=1\n",
    "for u in newnewnewnewnew:\n",
    "    sumsum=sumsum+u\n",
    "print(sumsum)\n",
    "StandardError= np.sqrt(sumsum/4)\n",
    "print(StandardError)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "21de049b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def dvh(x):\n",
    "    return (((300000/3968.5)**2)*(x**2))**(1/2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "94b97c2e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def dvk(x):\n",
    "    return (((300000/3933.7)**2)*(x**2))**(1/2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "34473163",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "604.762504724707\n",
      "604.762504724707\n",
      "680.3578178152953\n",
      "453.57187854353026\n",
      "604.762504724707\n"
     ]
    }
   ],
   "source": [
    "dk=[9,8,8,7,9]\n",
    "dh=[8,8,9,6,8]\n",
    "ddvh=[]\n",
    "ddvk=[]\n",
    "for i in dh:\n",
    "    print(dvh(i))\n",
    "    ddvh.append(dvh(i))   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "c26e8813",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "686.3766936980451\n",
      "610.1126166204846\n",
      "610.1126166204846\n",
      "533.848539542924\n",
      "686.3766936980451\n"
     ]
    }
   ],
   "source": [
    "for i in dk:\n",
    "    print(dvk(i))\n",
    "    ddvk.append(dvk(i))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "0ea25b1a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[34064.64338583598, 13621.844600477969, 5110.225783141848, 37450.71119708954, 19757.70250550324]\n"
     ]
    }
   ],
   "source": [
    "i=0\n",
    "b=0\n",
    "g=0\n",
    "m=0\n",
    "weight=[]\n",
    "weight1=[]\n",
    "vweight=[]\n",
    "dvweight=[]\n",
    "while i< len(dk):\n",
    "    newnewnew[i]/(ddvk[i]**2)+newnew[i]/(ddvh[i]**2)\n",
    "    weight.append(newnewnew[i]/(ddvk[i]**2)+newnew[i]/(ddvh[i]**2))\n",
    "    i+=1\n",
    "while b< len(dh):\n",
    "    1/(ddvk[b]**2)+1/(ddvh[b]**2)\n",
    "    weight1.append(1/(ddvk[b]**2)+1/(ddvh[b]**2))\n",
    "    b+=1\n",
    "while g< len(weight):\n",
    "    weight[g]/weight[g]\n",
    "    vweight.append(weight[g]/weight1[g])\n",
    "    g+=1\n",
    "vweight[0]= 2*vweight[0] \n",
    "print(vweight)\n",
    "while m < len(weight1):\n",
    "    (1/weight1[m])**(1/2)\n",
    "    dvweight.append((1/weight1[m])**(1/2))\n",
    "    m+=1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "b1c34485",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "57.31990002496421\n",
      "64.60136868290795\n",
      "70.54425432277537\n",
      "66.29148440027178\n",
      "75.81038487262389\n"
     ]
    }
   ],
   "source": [
    "D=(594.29,210.86,72.44,564.94,260.62)\n",
    "new=[]\n",
    "k=0\n",
    "l=0\n",
    "while k < len(vweight):\n",
    "    while l < len(D):\n",
    "        print(vweight[k]/D[l])\n",
    "        new.append(vweight[k]/D[l])\n",
    "        k+=1\n",
    "        l+=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "c44b12d9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "66.91347846070865\n"
     ]
    }
   ],
   "source": [
    "summ=0\n",
    "for n in new:\n",
    "    summ= summ +n\n",
    "print(summ/5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "12e62d63",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "190.10695250154583\n",
      "6.893963890635522\n"
     ]
    }
   ],
   "source": [
    "newnewnewnewnew=[]\n",
    "c=0\n",
    "sumsum=0\n",
    "while c <len(new):\n",
    "    (summ/5-new[c])**2\n",
    "    newnewnewnewnew.append((summ/5-new[c])**2)\n",
    "    c+=1\n",
    "for u in newnewnewnewnew:\n",
    "    sumsum=sumsum+u\n",
    "print(sumsum)\n",
    "StandardError= np.sqrt(sumsum/4)\n",
    "print(StandardError)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "4e13fd69",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hubble Constant [63.03203369]\n",
      "[[2.89105844]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(D,vweight)\n",
    "plt.xlabel('Distance (Mpc)')\n",
    "plt.ylabel('Recession Velocity (km/s)')\n",
    "def linfunction(m,x):\n",
    "    return m*x\n",
    "pars, cov= curve_fit(linfunction,D,vweight)\n",
    "plt.plot(D,linfunction(D,pars))\n",
    "plt.grid(True)\n",
    "print('Hubble Constant',pars)\n",
    "plt.errorbar(D, vweight,dvweight , 0.05, fmt='o')\n",
    "print(np.sqrt(cov))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6e44d9aa",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
